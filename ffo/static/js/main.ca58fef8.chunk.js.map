{"version":3,"sources":["bgPattern.svg","components/loading/Loading.jsx","components/button/button.jsx","services/common/index.js","services/team/get.js","components/loading/index.js","services/competition/getPreviousSeason.js","services/competition/get.js","services/financial/getBroadcastingRevenue.js","services/financial/getAttendance.js","services/team/getManager.js","pages/teamselect/competitionContext.js","components/teamAnalyse/index.js","components/teamAnalyse/TeamAnalyse.jsx","components/button/index.js","components/teamsInLeague/TeamCard.jsx","components/teamsInLeague/index.js","components/teamsInLeague/TeamsInLeague.jsx","hooks/useLocalStorage.js","pages/UserContext.js","pages/teamselect/index.js","pages/teamselect/TeamSelect.jsx","services/user/userServices.js","pages/Start.jsx","styles/mat-theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","loading","className","src","alt","Button","children","green","onClick","primary","lg","link","classes","secondary","href","default","getCookie","name","parts","document","cookie","split","length","pop","shift","standardHeaders","TeamServices","getTeamsForLeague","competitionId","Promise","accept","reject","fetch","process","method","headers","body","JSON","stringify","query","then","response","json","console","log","data","teamsInCompetition","catch","err","getTeamFromTeamId","teamId","getTeam","team","_id","logo","ground","capacity","city","getPreviousSeasonForTier","tier","country","a","jsonResponse","competitions","CompetitionServices","getBroadcastingRevenue","broadcastRevenue","getAttendences","attendances","getCurrentManager","coaches","getCompetitionsForCountry","CompetitionContext","React","createContext","TeamAnalyse","broadcastingRevenue","onBack","teamInfo","competition","useContext","useState","attendanceInfo","setAttendanceInfo","manager","setManager","useEffect","season","getAttendence","leagueId","attendenceRec","myData","getFloat","value","label","flVal","parseFloat","push","angle","toFixed","subLabel","totalRevenue","equalShare","basicAward","solidarity","minimumFeaturedGames","facilityFeePerGame","overseasPaymentMin","centralCommercial","Grid","container","item","xs","variant","color","startIcon","class","toLocaleString","undefined","knownAs","firstName","lastName","colorType","colorDomain","width","height","showLabels","labelsAboveChildren","attendance","TeamCard","onAnalyseTeam","Card","CardContent","CardActions","TeamsInLeague","key","initialValue","window","localStorage","getItem","parse","error","storedValue","setStoredValue","valueToStore","Function","setItem","useLocalStorage","teamsByCompetition","setTeamsByCompetition","teams","setTeams","selectedTeam","setSelectedTeam","broadcasting","setBroadcasting","TeamQueries","teamInCompetitions","all","map","teamComp","teamDetail","t","UserContext","TeamSelect","gender","selectedCompId","setSelectedCompetition","context","info","style","fontSize","filter","c","includes","sort","b","comp","Accordion","onChange","ev","expanded","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","Provider","getUsersFromId","twitterId","users","getUserInfo","replace","user","createUser","screenName","location","userId","Start","load","setLoad","setCompetitions","setUser","startGame","userService","userInfo","parseInt","usersList","userResult","message","record","createMuiTheme","require","palette","main","App","svgPattern","ThemeProvider","theme","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca58fef8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgPattern.abbb91ac.svg\";","import React from 'react';\r\nimport './Loading.scss';\r\n\r\nconst loading = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"loading-text-container\">\r\n                <div>loading...</div>\r\n            </div>\r\n            <div className=\"app-logo-container\">\r\n                <img src={'MainLogo.svg'} className=\"app-logo-loading\" alt=\"ball-logo\" />\r\n            </div>\r\n        </div>);\r\n}\r\n \r\nexport default loading;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './button.scss';\r\n\r\nconst Button = ({children, green, onClick, primary, lg ,link, secondary}) => {\r\n    let classes = 'button ';\r\n    classes += primary ? 'primary-btn' : '';\r\n    classes += secondary ? 'secondary-btn' : '';\r\n    classes += green ? 'green-btn' : '';\r\n    classes += lg ? ' lg-btn' : ' md-btn';\r\n    return (<a href={link} className={classes} onClick={onClick}>\r\n        {children}\r\n    </a>);\r\n}\r\n\r\nButton.default = {\r\n    link: ''\r\n}\r\n\r\nButton.propTypes = {\r\n    green: PropTypes.bool,\r\n    primary: PropTypes.bool\r\n}\r\n \r\nexport default Button;","export function getCookie(name) {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop().split(';').shift();\r\n}\r\n\r\nexport const standardHeaders = {\r\n  'Content-Type': 'application/json',\r\n  'Accept': 'application/json',\r\n  'Authorization': 'Bearer ' + getCookie('token')\r\n};","import { getCookie } from '../common';\r\n\r\nexport default class TeamServices {\r\n    static getTeamsForLeague = (competitionId) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { teamsInCompetition(competitionId: ${competitionId}) {` + \r\n                    `teamId\r\n                    standing\r\n                    competitionId\r\n                }}`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.data);\r\n                accept(response.data.teamsInCompetition);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n\r\n    static getTeamFromTeamId = (teamId) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { getTeam(filter: { teamId: ${teamId} }) {` + \r\n                    `name \r\n                     logo\r\n                     _id\r\n                     ground {\r\n                        name\r\n                        capacity\r\n                        city\r\n                      }\r\n                }}`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.data.getTeam);\r\n                const team = response.data.getTeam;\r\n                accept({\r\n                    name: team.name,\r\n                    _id: team._id,\r\n                    logo: team.logo,\r\n                    ground: team.ground.name,\r\n                    capacity: team.ground.capacity,\r\n                    city: team.ground.city\r\n                });\r\n            }).catch((err) => {\r\n                reject(null, err);\r\n            })\r\n        );\r\n    }\r\n}","import loading from \"./Loading\";\r\n\r\nexport default loading;","import { getCookie } from '../common';\r\n\r\nexport default async function getPreviousSeasonForTier(tier, country) {\r\n    try {\r\n        const response = await fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { competitions(filter:` +\r\n                `{ isCurrent: false, tier: ${tier}, country: \"${country}\" }, sort: START_DATE_DESC) { ` +\r\n                        `name\r\n                        leagueId\r\n                }}`})\r\n            });\r\n        \r\n        const jsonResponse = await response.json();\r\n        return jsonResponse.data.competitions[0];\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import { getCookie } from '../common';\r\n\r\nexport default class CompetitionServices {\r\n    static getCompetitionsForCountry = (country) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { competitions(filter: { AND: [{ isCurrent: true }, { country: \"${country}\" }, { type: LEAGUE }]})` + \r\n                '{ name leagueId isCurrent tier logo country }}'})\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //console.log(data);\r\n                accept(data);\r\n            }).catch(err => reject(err)));\r\n    }\r\n}","import { getCookie } from '../common';\r\n\r\nexport default async function getBroadcastingRevenue (competitionId) {\r\n    try {\r\n        const response = await fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { broadcastRevenue(filter: { competitionId: ${competitionId} }) {` + \r\n                    `equalShare\r\n                    basicAward\r\n                    solidarity\r\n                    meritStart\r\n                    centralCommercial\r\n                    overseasPaymentMin\r\n                    minimumFeaturedGames\r\n                    facilityFeePerGame\r\n                }}`})\r\n            });\r\n        \r\n        const jsonResponse = await response.json();\r\n        return jsonResponse.data.broadcastRevenue[0];\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import { getCookie } from '../common';\r\n\r\nexport default async function getAttendences(teamId, competitionId) {\r\n    try {\r\n        const response = await fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { attendances(filter: { competitionId: ${competitionId}, teamId: ${teamId} }) {` + \r\n                    `attendance\r\n                }}`})\r\n            });\r\n        \r\n        const jsonResponse = await response.json();\r\n        return jsonResponse.data.attendances[0];\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import { standardHeaders } from '../common';\r\n\r\nexport default async function getCurrentManager(teamId) {\r\n    try {\r\n        const response = await fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: standardHeaders,\r\n                body: JSON.stringify({\r\n                    query: `query { coaches(filter: { currentTeamId: ${teamId} }) {` + \r\n                    `firstName\r\n                    lastName\r\n                    knownAs\r\n                    career {\r\n                        teamId,\r\n                        start,\r\n                        end\r\n                    }\r\n                }}`})\r\n            });\r\n        \r\n        const jsonResponse = await response.json();\r\n        return jsonResponse.data.coaches[0];\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst CompetitionContext = React.createContext('competition');\r\n\r\nexport default CompetitionContext;","import TeamAnalyse from \"./TeamAnalyse\";\r\n\r\nexport default TeamAnalyse;","import React, { useContext, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { RadialChart } from 'react-vis';\r\nimport Loading from '../loading';\r\nimport './TeamAnalyse.scss';\r\nimport { getPreviousSeasonForTier } from '../../services/competition';\r\nimport { getAttendence } from '../../services/financial';\r\nimport { getCurrentManager } from '../../services/team';\r\nimport CompetitionContext from '../../pages/teamselect/competitionContext';\r\n\r\nconst TeamAnalyse = ({ broadcastingRevenue, onBack, teamInfo }) => {\r\n    const competition = useContext(CompetitionContext);\r\n    console.log(\"comp:\", competition, teamInfo);\r\n    const [ attendanceInfo, setAttendanceInfo ] = useState(null);\r\n    const [ manager, setManager ] = useState(null);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const manager = await getCurrentManager(teamInfo.teamId);\r\n            const season = await getPreviousSeasonForTier(competition.tier, competition.country);\r\n            const attendenceRec = await getAttendence(teamInfo.teamId, season.leagueId);\r\n            setAttendanceInfo(attendenceRec);\r\n            setManager(manager);\r\n            //const ticketInfo = await getTicketInfo(teamInfo.teamId);\r\n        })();\r\n    }, [competition, teamInfo.teamId]);\r\n\r\n    const myData = [];\r\n    const getFloat = (value, label) => {\r\n        if (value) {\r\n            const flVal = parseFloat(value);\r\n            myData.push({ angle: flVal, label: `£${flVal.toFixed(1)}m`, subLabel: `${label}`});\r\n            return flVal;\r\n        } else {\r\n            return 0;\r\n        };\r\n    }\r\n\r\n    const equalShare = getFloat(broadcastingRevenue.equalShare, \"Equal Share\");\r\n    const basicAward = getFloat(broadcastingRevenue.basicAward, \"Basic Award\");\r\n    const solidarity = getFloat(broadcastingRevenue.solidarity, \"Solidarity\");\r\n    const featured = getFloat((broadcastingRevenue.minimumFeaturedGames + 1) * broadcastingRevenue.facilityFeePerGame, \"Featured Game Facility Fees\");\r\n    const overseasPaymentMin = getFloat(broadcastingRevenue.overseasPaymentMin, \"Overseas\");\r\n    const centralCommercial = getFloat(broadcastingRevenue.centralCommercial, \"Central Commercial\");\r\n    const totalRevenue = (equalShare + basicAward + solidarity + featured + overseasPaymentMin + centralCommercial).toFixed(1);\r\n\r\n    return <>\r\n        {manager ? <Grid container className={\"pad-md-left\"}>\r\n            <Grid item xs=\"1\">\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => onBack()} startIcon={<ArrowBackIcon />}>Back</Button>\r\n            </Grid>\r\n            <Grid item xs=\"3\">\r\n                <h3 class=\"text-center\">{teamInfo.name} Financial Analysis</h3>\r\n                <img src={teamInfo.logo} class=\"team-logo pad-left-xxl\" alt={`${teamInfo.name} logo`} />\r\n                <div class=\"text-center\">{teamInfo.ground}, {teamInfo.city}</div>\r\n                <div class=\"text-center\">Capacity: {teamInfo.capacity.toLocaleString(\"en-GB\")}</div>\r\n                {manager !== undefined && <div class=\"text-center\">Current Manager: {manager.knownAs || manager.firstName + ' ' + manager.lastName}</div>}\r\n            </Grid>\r\n            <Grid item xs=\"7\" className={\"pad-left-md\"}>\r\n                <span>Minimum Estimated Broadcasting Revenue: £{totalRevenue}m</span>\r\n                {myData.length > 0 || myData[0].value === \"0.0\" ? <RadialChart\r\n                    colorType=\"linear\"\r\n                    colorDomain={[0, 2]}\r\n                    data={myData}\r\n                    width={300}\r\n                    height={250} showLabels labelsAboveChildren className={\"broadcasting-radial\"} />\r\n                    : <div>No information found for broadcasting</div>}\r\n            </Grid>\r\n            <Grid item xs=\"4\"></Grid>\r\n            {attendanceInfo ? <Grid item xs=\"8\">\r\n                <span>Average attendance last season: {attendanceInfo.attendance.toLocaleString(\"en-GB\")}</span>\r\n                {/* <span>Revenue Estimate: £{attendanceInfo.attendance * getAveragePrice}m</span> */}\r\n            </Grid> : <loading />}\r\n            <Grid item xs=\"4\"></Grid>\r\n            <Grid item xs=\"8\">\r\n                <span>Estimated Expenses: £{totalRevenue}m</span>\r\n            </Grid>\r\n            <Grid item xs=\"4\"></Grid>\r\n            <Grid item xs=\"8\">\r\n                <span>Potential Cash Generation: £{totalRevenue}m</span>\r\n            </Grid>\r\n        </Grid> : <><Loading/><div>Finding team information</div></>}\r\n    </>;\r\n}\r\n\r\nTeamAnalyse.propTypes = {\r\n    broadcastingRevenue: PropTypes.object.isRequired,\r\n    teamInfo: PropTypes.object.isRequired\r\n}\r\n \r\nexport default TeamAnalyse;","import Button from \"./button\";\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '../button';\r\n\r\nconst TeamCard = ({competitionId, onAnalyseTeam, teamInfo}) => {\r\n    const name = teamInfo.name;\r\n    return <Card className=\"team-card\">\r\n        <CardContent>\r\n            <div className=\"team-content\">\r\n                <img src={teamInfo.logo} alt={`${name} logo`}/>\r\n            </div>\r\n        </CardContent>\r\n        <CardActions>\r\n            <Button onClick={() => onAnalyseTeam(teamInfo)} green>Analyse {name}</Button>\r\n        </CardActions>\r\n    </Card>;\r\n}\r\n\r\nTeamCard.propTypes = {\r\n    onAnalyseTeam: PropTypes.func,\r\n    teamInfo: PropTypes.object\r\n}\r\n \r\nexport default TeamCard;","import TeamsInLeague from \"./TeamsInLeague\";\r\n\r\nexport default TeamsInLeague;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport TeamQueries from '../../services/team/get';\r\nimport Loading from '../loading';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\nimport TeamAnalyse from '../teamAnalyse'\r\nimport './TeamsInLeague.scss';\r\nimport TeamCard from './TeamCard';\r\nimport { getBroadcastingRevenue } from '../../services/financial';\r\nimport CompetitionContext from '../../pages/teamselect/competitionContext';\r\n\r\nconst TeamsInLeague = () => {\r\n    const competition = useContext(CompetitionContext);\r\n    const competitionId = competition.leagueId;\r\n    const [ teamsByCompetition, setTeamsByCompetition ] = useLocalStorage('teamsByCompetitionId', []);\r\n    const [ teams, setTeams ] = useState([]);\r\n    const [ selectedTeam, setSelectedTeam ] = useState(null);\r\n    const [ broadcasting, setBroadcasting ] = useState(null);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const teamsInCompetition = teamsByCompetition[competitionId];\r\n            if (teamsInCompetition) {\r\n                setTeams(teamsInCompetition);\r\n            } else {\r\n                const teamInCompetitions = await TeamQueries.getTeamsForLeague(competitionId);\r\n                Promise.all(\r\n                    teamInCompetitions.map(async (teamComp) => {\r\n                        const teamDetail = await TeamQueries.getTeamFromTeamId(teamComp.teamId);\r\n                        teamDetail.teamId = teamComp.teamId;\r\n                        return teamDetail;\r\n                    })\r\n                ).then((teams) => {\r\n                    setTeams(teams);\r\n                    setTeamsByCompetition({...teamsByCompetition, [competitionId] : teams });\r\n                });\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (selectedTeam) {\r\n                const broadcasting = await getBroadcastingRevenue(competitionId);\r\n                setBroadcasting(broadcasting);\r\n            }\r\n        })();\r\n    }, [selectedTeam]);\r\n\r\n    return teams.length > 0 ? \r\n        selectedTeam && broadcasting ? \r\n        <TeamAnalyse onBack={() => setSelectedTeam(null)} broadcastingRevenue={broadcasting} teamInfo={selectedTeam} /> :\r\n        <div className=\"team-cards\">\r\n            {teams.map((t) => <TeamCard onAnalyseTeam={(teamInfo) => setSelectedTeam(teamInfo)} key={t.teamId} teamInfo={t} />)}\r\n        </div>\r\n        : <Loading></Loading>;\r\n}\r\n \r\nexport default TeamsInLeague;","import { useState } from 'react';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // If error also return initialValue\r\n        console.log(error);\r\n        return initialValue;\r\n      }\r\n    });\r\n  \r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = value => {\r\n      try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n        console.log(error);\r\n      }\r\n    };\r\n  \r\n    return [storedValue, setValue];\r\n  }","import React from 'react';\r\n\r\nconst UserContext = React.createContext('user');\r\n\r\nexport default UserContext;","import TeamSelect from \"./TeamSelect\";\r\n\r\nexport default TeamSelect;","import React, { useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BasicRadio from '../../components/radio/radio';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TeamsInLeague from '../../components/teamsInLeague';\r\nimport './TeamSelect.scss';\r\nimport UserContext from '../UserContext';\r\nimport CompetitionContext from './competitionContext';\r\n\r\nconst TeamSelect = ({competitions}) => {\r\n    const [gender, setGender] = useState('men');\r\n    const [selectedCompId, setSelectedCompetition ] = useState(null);\r\n    const context = useContext(UserContext);\r\n    console.info(context);\r\n\r\n    return (<section className=\"leagues\">\r\n        {/* <BasicRadio value={gender} setValue={setGender} /> */}\r\n        <div className={\"pad-all-sm marg-bottom-sm flex\"} style={{color: \"#fff\", fontSize: \"1.2rem\"}}>\r\n            <span className={\"text-center\"} style={{width: \"90%\"}}>Take control! Select a team to analyse for financial viability.</span>\r\n            <span className={\"align-right\"}>Budget: 7m</span>\r\n        </div>\r\n        {gender === 'men' ? competitions.filter(c => !c.name.includes('WSL') && \r\n            (selectedCompId === null || selectedCompId === c.leagueId)).sort((a, b) => a.tier > b.tier ? 1 : -1).map((comp) => {\r\n            return <Accordion key={comp.leagueId} onChange={(ev, expanded) => {\r\n                console.log(expanded);\r\n                setSelectedCompetition(expanded ? comp.leagueId : null)\r\n        }} className=\"team-select-acc\" TransitionProps={{ unmountOnExit: true }}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel1a-content\"\r\n                            id=\"panel1a-header\">\r\n                            {comp.name}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CompetitionContext.Provider value={comp}>\r\n                                <TeamsInLeague />\r\n                            </CompetitionContext.Provider>\r\n                        </AccordionDetails>\r\n                </Accordion>\r\n        }) : competitions.filter(c => c.name.includes('WSL')).sort((a, b) => a.tier > b.tier ? 1 : -1).map((comp) => {\r\n            return <div key={comp.leagueId} className=\"league\">\r\n                    <div className=\"league-name\">\r\n                        {comp.name}\r\n                    </div>\r\n                    <div className=\"league-logo\">\r\n                        <CompetitionContext.Provider value={comp}>\r\n                            <TeamsInLeague />\r\n                        </CompetitionContext.Provider>\r\n                    </div>\r\n                </div>\r\n        })}\r\n    </section>);\r\n}\r\n\r\nTeamSelect.propTypes = {\r\n    competitions: PropTypes.array\r\n}\r\n \r\nexport default TeamSelect;","import { getCookie } from '../common';\r\n\r\nexport default class TeamServices {\r\n    static getUsersFromId = (twitterId) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query getUsers {\r\n                    users(filter: { twitterId: ${twitterId} }) {\r\n                      screenName\r\n                      name\r\n                      location\r\n                      authLevel\r\n                      userId\r\n                    }\r\n                  }`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                accept(response.data.users);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n\r\n    static getUserInfo = () => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER.replace('graphql', 'api/user'),\r\n            {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.user);\r\n                accept(response.user);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n\r\n    static createUser = ({ name, screenName, location, userId }) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `mutation addUser { \r\n                    createUser(record:{ twitterId: ${userId}, screenName: \"${screenName}\", name: \"${name}\", location: \"${location}\", authLevel: PLAYER}) {\r\n                    recordId,\r\n                    record {\r\n                      name\r\n                      userId\r\n                      screenName\r\n                      location\r\n                      authLevel\r\n                    },\r\n                    error {\r\n                      message\r\n                    }\r\n                  }\r\n                }`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.data);\r\n                accept(response.data);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport Loading from '../components/loading/Loading';\r\nimport Button from '../components/button/button';\r\nimport TeamSelect from './teamselect'\r\nimport CompetitionServices from '../services/competition/get';\r\nimport userService from '../services/user/userServices';\r\nimport UserContext from './UserContext';\r\nimport './Start.scss';\r\n\r\nconst Start = () => {\r\n    const [ load, setLoad ] = useState(false);\r\n    const [ competitions, setCompetitions ] = useState([]);\r\n    const [ user, setUser ] = useState(null);\r\n\r\n    const startGame = async () => {\r\n        setLoad(true);\r\n\r\n        const userInfo = await userService.getUserInfo();\r\n\r\n        if (userInfo) {\r\n            const usersList = await userService.getUsersFromId(parseInt(userInfo.userId));\r\n\r\n            if (usersList.length === 0) {\r\n                const userResult = await userService.createUser(userInfo);\r\n                userResult.error.message ? \r\n                    console.error('unable to create user: ', userResult.error.message) :\r\n                    setUser(userResult.record);\r\n            } else {\r\n                setUser(usersList[0]);\r\n            }\r\n        }\r\n        const response = await CompetitionServices.getCompetitionsForCountry('England');\r\n        if (response && response.data) {\r\n            setCompetitions(response.data.competitions);\r\n            setLoad(false);\r\n        } else {\r\n            console.error('unable to retrieve competitions', response);\r\n        };\r\n    }\r\n\r\n    return <div className=\"app-start\">\r\n            {(!load && competitions.length === 0) && <><div className=\"heading\">\r\n                <div className=\"text-logo-left\">\r\n                    <img src={'LogoFFOText.svg'} className=\"text-logo\" alt=\"logo\" />\r\n                </div>\r\n                <div className=\"text\">Welcome to Fantasy Football Owner {document.cookie['userName']}</div>\r\n                <div className=\"text-logo-right\">\r\n                    <img src={'LogoFFOText.svg'} className=\"text-logo\" alt=\"logo\" />\r\n                </div>\r\n            </div>\r\n            <section className=\"app-start-action\">\r\n                <span>This is a Fantasy Football game based on real events/data</span>\r\n                <span>Manager transitions, player crises, financial ruin?! This is fantasy football like no other.</span>\r\n                <span>Legal notice: this is a non-comercial/amateur game. Players/users do not pay for any service.</span>\r\n                <Button green lg onClick={startGame}>Start new game</Button>\r\n            </section></>}\r\n            {load && <Loading />}\r\n            {(!load && competitions.length > 0) && \r\n            <UserContext.Provider value={user}>\r\n                <TeamSelect competitions={competitions}/>\r\n            </UserContext.Provider>}\r\n        </div>;\r\n}\r\n \r\nexport default Start;","const { createMuiTheme } = require(\"@material-ui/core\");\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n        // Light Green\r\n        main: '#69bb31',\r\n        },\r\n        secondary: {\r\n        // Red\r\n        main: '#8f214d',\r\n        },\r\n    },\r\n});","import React from 'react';\nimport Start from './pages/Start';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './styles/mat-theme';\nimport svgPattern from './bgPattern.svg'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"background\">\n        <img alt=\"background pattern\" src={svgPattern}></img>\n      </div>\n      <ThemeProvider theme={theme}>\n        <Start />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}