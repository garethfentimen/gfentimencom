{"version":3,"sources":["components/button/button.jsx","services/common/index.js","hooks/useFetch.js","services/game/index.js","context/userContext.js","pages/Start.jsx","styles/mat-theme.js","bgPattern.svg","pages/clubhouse/Clubhouse.jsx","services/user/userServices.js","services/team/get.js","components/loading/Loading.jsx","components/button/index.js","services/team/getManager.js","components/analysis/Broadcasting.jsx","services/financial/getBroadcastingRevenue.js","services/financial/index.js","components/analysis/Matchday.jsx","context/competitionContext.js","components/teamanalyse/index.js","components/teamanalyse/TeamAnalyse.jsx","services/competition/index.js","components/teamsInLeague/TeamCard.jsx","components/teamsInLeague/index.js","components/teamsInLeague/TeamsInLeague.jsx","hooks/useLocalStorage.js","pages/teamselect/TeamSelect.jsx","pages/teamselect/index.js","pages/teamselect/TeamSelectContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","children","green","onClick","primary","lg","link","classes","secondary","href","className","default","getCookie","name","parts","document","cookie","split","length","pop","shift","standardHeaders","useFetch","query","returnObjectName","run","useState","runNow","setRunNow","thisQuery","setQuery","rtnObj","setRtnObj","useEffect","a","fetch","process","method","headers","body","JSON","stringify","response","json","previousState","loading","data","error","message","setGameTeam","currentLeagueId","team","user","today","Date","startDate","dayjs","format","teamId","userId","UserContext","React","createContext","Start","history","useHistory","useContext","gameTeam","gameTeamLoading","gameTeamError","push","src","alt","createMuiTheme","require","palette","main","Clubhouse","params","useParams","style","position","TeamServices","getUsersFromId","twitterId","Promise","accept","reject","then","users","catch","err","getUserInfo","replace","console","info","createUser","screenName","location","log","getTeamsForLeague","competitionId","teamsInCompetition","getTeamFromTeamId","getTeam","_id","logo","ground","capacity","city","getCurrentManager","jsonResponse","coaches","BroadcastingAnalysis","broadcastingRevenue","myData","getFloat","value","label","flVal","parseFloat","angle","toFixed","subLabel","totalRevenue","equalShare","basicAward","solidarity","minimumFeaturedGames","facilityFeePerGame","overseasPaymentMin","centralCommercial","colorType","colorDomain","width","height","showLabels","labelsAboveChildren","getBroadcastingRevenue","broadcastRevenue","getAttendence","Matchday","season","leagueId","attendanceInfos","attendanceInfosLoading","attError","reRun","attendanceInfo","seasonTickets","matchdayTickets","attendance","unsoldTickets","Grid","item","xs","toLocaleString","start","getFullYear","end","formatCompetitionName","context","s","competitionName","TeamAnalyse","onBack","onTeamSelect","teamInfo","competition","competitionContext","manager","setManager","setSeason","seasons","seasonsLoading","find","select","Select","onChange","e","target","map","MenuItem","key","container","justify","variant","color","startIcon","direction","alignItems","undefined","knownAs","firstName","lastName","Broadcasting","TeamCard","onAnalyseTeam","Card","CardContent","CardActions","TeamsInLeague","CompetitionContext","initialValue","window","localStorage","getItem","parse","storedValue","setStoredValue","valueToStore","Function","setItem","useLocalStorage","teamsByCompetition","setTeamsByCompetition","teams","setTeams","selectedTeam","setSelectedTeam","broadcasting","setBroadcasting","createGameTeamResult","createGameTeamLoading","runCreateGameTeam","updateQuery","TeamQueries","teamInCompetitions","all","teamComp","teamDetail","record","t","TeamSelect","competitions","gender","selectedCompId","setSelectedCompetition","fontSize","filter","c","includes","sort","b","tier","comp","Accordion","ev","expanded","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","Provider","TeamSelectContainer","competitionsQuery","competitionsForCountry","competitionsLoading","competitionLoadError","App","setUser","userService","userInfo","parseInt","usersList","userResult","svgPattern","ThemeProvider","theme","basename","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kYAIMA,G,OAAS,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,KAChDC,EAAU,UAKd,OAJAA,GAAWH,EAAU,cAAgB,GACrCG,GAHyE,EAAfC,UAGnC,gBAAkB,GACzCD,GAAWL,EAAQ,YAAc,GACjCK,GAAWF,EAAK,UAAY,UACpB,uBAAGI,KAAMH,EAAMI,UAAWH,EAASJ,QAASA,GAC/CF,KAITD,EAAOW,QAAU,CACbL,KAAM,IAQKN,Q,iBCxBR,SAASY,EAAUC,GACtB,IACMC,EADK,YAAQC,SAASC,QACRC,MAAN,YAAiBJ,EAAjB,MACd,GAAqB,IAAjBC,EAAMI,OAAc,OAAOJ,EAAMK,MAAMF,MAAM,KAAKG,QAGnD,IAAMC,EAAkB,CAC7B,eAAgB,mBAChB,OAAU,mBACV,cAAiB,UAAYT,EAAU,UCgD1BU,MAtDf,SAAkBC,GAA2C,IAApCC,EAAmC,uDAAhB,GAAIC,IAAY,yDACxD,EAA4BC,mBAASD,GAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAASH,GAAvC,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAgDA,OA9CAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,0DACKP,EADL,0CAG4BQ,MAAMC,4CAAoC,CAC/DC,OAAQ,OACRC,QAASjB,EACTkB,KAAMC,KAAKC,UAAU,CAAElB,MAAMM,MANpC,cAGWa,EAHX,gBAQwBA,EAASC,OARjC,QAQWA,EARX,SAYSX,EADER,EACQ,SAACoB,GAAD,mBAAC,eACJA,GACA,CACDC,SAAS,EACTC,KAAMH,EAAKG,KAAKtB,MAIZ,SAACoB,GAAD,mBAAC,eACNA,GACA,CACDC,SAAS,EACTC,KAAMH,EAAKG,SAxBxB,kDA8BKd,GAAU,SAACY,GAAD,mBAAC,eACJA,GACA,CACDC,SAAS,EACTC,KAAM,KACNC,MAAO,KAAMC,aAnCxB,QAuCGpB,GAAU,GAvCb,yDAAD,KA2CC,CAACD,IAEG,CAAEI,EAAOe,KAAMf,EAAOc,QAASd,EAAOgB,MAAOnB,EAAWE,I,kBCzC5D,SAASmB,EAAYC,EAAiBC,EAAMC,GAC/C,IAAMC,EAAQ,IAAIC,KACZC,EAAYC,IAAMH,GAAOI,OAAO,cACtC,MAAO,wDACQN,EAAOA,EAAKO,OAAS,GAD7B,uBAEQN,EAAOA,EAAKO,OAAS,GAF7B,4BAGYJ,EAHZ,kCAIiBL,GAJjB,sICdX,IAEeU,EAFKC,IAAMC,cAAc,QCuCzBC,EAjCD,WACV,IFPwBJ,EEOpBK,EAAUC,cACRb,EAAOc,qBAAWN,GACxB,EACKtC,GFVmBqC,EEUEP,EAAOA,EAAKO,OAAS,MFT/B,iDACKA,EADL,kKAOE,GEEoC,aADtD,mBAAQQ,EAAR,KAAkBC,EAAlB,KAAmCC,EAAnC,KAWA,OAJIF,IAAaE,GACbL,EAAQM,KAAK,cAAgBH,EAAST,SAGlCU,GAAmB,yBAAK1D,UAAU,aAClC,yBAAKA,UAAU,WACX,yBAAKA,UAAU,kBACX,yBAAK6D,IAAKnC,iCAA6C1B,UAAU,YAAY8D,IAAI,UAErF,yBAAK9D,UAAU,QAAf,qCAAyDK,SAASC,OAAT,UACzD,yBAAKN,UAAU,mBACX,yBAAK6D,IAAKnC,iCAA6C1B,UAAU,YAAY8D,IAAI,WAGzF,6BAAS9D,UAAU,oBACf,2FACA,8HACA,+HACA,kBAAC,EAAD,CAAQR,OAAK,EAACG,IAAE,EAACF,QAtB7B,WACI6D,EAAQM,KAAK,UAqBL,qB,SClCDG,KAFYC,EAAQ,KAA3BD,gBAEsB,CAC1BE,QAAS,CACLvE,QAAS,CAETwE,KAAM,WAENpE,UAAW,CAEXoE,KAAM,cCVC,MAA0B,sC,gBCGlC,SAASC,IACZ,IAAMC,EAASC,YAAU,UACzB,OAAO,yBAAKC,MAAO,CAACC,SAAU,aAAvB,uBAAyDH,EAAOpB,Q,aCHtDwB,E,kCAAAA,EACVC,eAAiB,SAACC,GACrB,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAAT,OACfpD,MAAMC,4CACN,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,mBACV,cAAiB,UAAY1B,EAAU,UAE3C2B,KAAMC,KAAKC,UAAU,CAAClB,MAAM,oEAAD,OACM6D,EADN,sNAU9BI,MAAK,SAAA9C,GAAQ,OAAIA,EAASC,UAC1B6C,MAAK,SAAA9C,GACF4C,EAAO5C,EAASI,KAAK2C,UACtBC,OAAM,SAACC,GACNJ,EAAOI,UAzBFT,EA8BVU,YAAc,WAEb,OAAO,IAAIP,SAAQ,SAACC,EAAQC,GACxBpD,MAAMC,4CAAmCyD,QAAQ,UAAW,YAC5D,CACIxD,OAAQ,MACRC,QAAS,CACL,OAAU,mBACV,cAAiB,UAAY1B,EAAU,YAG9C4E,MAAK,SAAA9C,GAAQ,OAAIA,EAASC,UAC1B6C,MAAK,SAAA9C,GACFoD,QAAQC,MAAQD,QAAQC,KAAKrD,EAASU,MACtCkC,EAAO5C,EAASU,SACjBsC,OAAM,SAACC,GACNJ,EAAOI,UA9CNT,EA0DVc,WAAa,YAA6C,IAA1CnF,EAAyC,EAAzCA,KAAMoF,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,SAAUvC,EAAa,EAAbA,OAC/C,OAAO,IAAI0B,SAAQ,SAACC,EAAQC,GAAT,OACfpD,MAAMC,4CACN,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,mBACV,cAAiB,UAAY1B,EAAU,UAE3C2B,KAAMC,KAAKC,UAAU,CAAClB,MAAM,2EAAD,OACUoC,EADV,0BACkCsC,EADlC,qBACyDpF,EADzD,yBAC8EqF,EAD9E,6YAgB9BV,MAAK,SAAA9C,GAAQ,OAAIA,EAASC,UAC1B6C,MAAK,SAAA9C,GACFoD,QAAQK,IAAIzD,EAASI,MACrBwC,EAAO5C,EAASI,SACjB4C,OAAM,SAACC,GACNJ,EAAOI,U,sFCzFFT,E,kCAAAA,EACVkB,kBAAoB,SAACC,GACxB,OAAO,IAAIhB,SAAQ,SAACC,EAAQC,GAAT,OACfpD,MAAMC,4CACN,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,mBACV,cAAiB,UAAY1B,EAAU,UAE3C2B,KAAMC,KAAKC,UAAU,CAAClB,MAAO,oDAA6C8E,EAA7C,yGAMhCb,MAAK,SAAA9C,GAAQ,OAAIA,EAASC,UAC1B6C,MAAK,SAAA9C,GACFoD,QAAQK,IAAIzD,EAASI,MACrBwC,EAAO5C,EAASI,KAAKwD,uBACtBZ,OAAM,SAACC,GACNJ,EAAOI,UAtBFT,EA2BVqB,kBAAoB,SAAC7C,GACxB,OAAO,IAAI2B,SAAQ,SAACC,EAAQC,GAAT,OACfpD,MAAMC,4CACN,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,mBACV,cAAiB,UAAY1B,EAAU,UAE3C2B,KAAMC,KAAKC,UAAU,CAAClB,MAAO,4CAAqCmC,EAArC,oPAWhC8B,MAAK,SAAA9C,GAAQ,OAAIA,EAASC,UAC1B6C,MAAK,SAAA9C,GACFoD,QAAQK,IAAIzD,EAASI,KAAK0D,SAC1B,IAAMrD,EAAOT,EAASI,KAAK0D,QAC3BlB,EAAO,CACHzE,KAAMsC,EAAKtC,KACX4F,IAAKtD,EAAKsD,IACVC,KAAMvD,EAAKuD,KACXC,OAAQxD,EAAKwD,OAAO9F,KACpB+F,SAAUzD,EAAKwD,OAAOC,SACtBC,KAAM1D,EAAKwD,OAAOE,UAEvBnB,OAAM,SAACC,GACNJ,EAAO,KAAMI,U,WChDd9C,EAZC,SAAC,GAAgB,IAAf5C,EAAc,EAAdA,SACd,OACI,yBAAKS,UAAU,WACX,yBAAKA,UAAU,0BACVT,GAAsB,4CAE3B,yBAAKS,UAAU,sBACX,yBAAK6D,IAAK,eAAgB7D,UAAU,mBAAmB8D,IAAI,iBCR5DxE,Q,6DCAA,SAAe8G,EAA9B,kC,4CAAe,WAAiCpD,GAAjC,iBAAAxB,EAAA,+EAEgBC,MAAMC,4CACzB,CACIC,OAAQ,OACRC,QAASjB,EACTkB,KAAMC,KAAKC,UAAU,CACjBlB,MAAO,mDAA4CmC,EAA5C,2PAPZ,cAEDhB,EAFC,gBAmBoBA,EAASC,OAnB7B,cAmBDoE,EAnBC,yBAoBAA,EAAajE,KAAKkE,QAAQ,IApB1B,4H,mCCoCAC,EAnCc,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBACtBC,EAAS,GACTC,EAAW,SAACC,EAAOC,GACrB,GAAID,EAAO,CACP,IAAME,EAAQC,WAAWH,GAEzB,OADAF,EAAO7C,KAAK,CAAEmD,MAAOF,EAAOD,MAAM,OAAD,OAAMC,EAAMG,QAAQ,GAApB,KAA2BC,SAAS,GAAD,OAAKL,KAClEC,EAEP,OAAO,GAUTK,GANaR,EAASF,EAAoBW,WAAY,eACzCT,EAASF,EAAoBY,WAAY,eACzCV,EAASF,EAAoBa,WAAY,cAC3CX,GAAUF,EAAoBc,qBAAuB,GAAKd,EAAoBe,mBAAoB,+BACxFb,EAASF,EAAoBgB,mBAAoB,YAClDd,EAASF,EAAoBiB,kBAAmB,uBACsCT,QAAQ,GAExH,OAAO,oCACH,6EAAgDE,EAAhD,KACCT,EAAOjG,OAAS,GAAyB,QAApBiG,EAAO,GAAGE,MAC5B,kBAAC,IAAD,CACIe,UAAU,SACVC,YAAa,CAAC,EAAG,GACjBvF,KAAMqE,EACNmB,MAAO,IACPC,OAAQ,IAAKC,YAAU,EAACC,qBAAmB,EAC3C/H,UAAW,wBAEf,wEChCG,SAAegI,EAA9B,kC,4CAAe,WAAuCrC,GAAvC,iBAAAnE,EAAA,+EAEgBC,MAAMC,4CACzB,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,mBACV,cAAiB,UAAY1B,EAAU,UAE3C2B,KAAMC,KAAKC,UAAU,CAAClB,MAAO,4DAAqD8E,EAArD,+SAV9B,cAED3D,EAFC,gBAsBoBA,EAASC,OAtB7B,cAsBDoE,EAtBC,yBAuBAA,EAAajE,KAAK6F,iBAAiB,IAvBnC,4H,sBCAR,SAASC,EAAcvC,EAAe3C,GACzC,MAAO,0DACqB2C,EADrB,qBAC+C3C,EAD/C,6ECKX,IA2CemF,EA3CE,SAAC,GAAkC,IAAhCjC,EAA+B,EAA/BA,SAAUkC,EAAqB,EAArBA,OAAQpF,EAAa,EAAbA,OAClC,EACIpC,EAASsH,EAAcE,EAAOC,SAAUrF,GAAS,eADrD,mBAAQsF,EAAR,KAAyBC,EAAzB,KAAiDC,EAAjD,KAA2DC,EAA3D,KAAkErH,EAAlE,KAGAgE,QAAQK,IAAI6C,EAAiBC,EAAwBC,GACrDjH,qBAAU,WACNH,EAAS8G,EAAcE,EAAOC,SAAUrF,IACxCyF,GAAM,KACP,CAACL,EAAOC,SAAUI,EAAOrH,EAAU4B,IAEtC,IAAM0F,EAAiBJ,GAAmBA,EAAgB9H,OAAS8H,EAAgB,GAAK,KAElFK,EAAgBD,EAAiBA,EAAeC,cAAgB,EAChEC,EAAkBF,EAAiBA,EAAeG,WAAaF,EAAgB,EAC/EG,EAAgBJ,EAAiBxC,EAAWwC,EAAeG,WAAa,EAE9E,OAAIN,EACO,kBAAC,EAAD,MAEJG,IAAmBF,EAClB,6BACI,kBAACO,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,oDAA0BP,EAAeG,WAAWK,eAAe,UACnE,oCAAUd,EAAOjI,KAAjB,IAAwB,IAAIyC,KAAKwF,EAAOe,OAAOC,cAA/C,IAA+D,IAAIxG,KAAKwF,EAAOiB,KAAKD,eACpF,kBAAC,IAAD,CACI1B,UAAU,SACVC,YAAa,CAAC,EAAG,GACjBvF,KAAM,CACF,CAAE2E,MAAO6B,EAAiBhC,MAAM,qBAAD,OAAuBgC,EAAgBM,eAAe,WACrF,CAAEnC,MAAO4B,EAAgB/B,MAAM,mBAAD,OAAqB+B,EAAcO,eAAe,WAChF,CAAEnC,MAAO+B,EAAgBlC,MAAM,WAAD,OAAakC,EAAcI,eAAe,YAE5EtB,MAAO,IACPC,OAAQ,IAAKC,YAAU,EAACC,qBAAmB,EAC3C/H,UAAW,sBAGd,6BACG,6CAAmBsJ,GAAsBlB,MC1ClDmB,EAFCpG,IAAMC,cAAc,eCA7B,SAASkG,GAAsBE,GAClC,MAAM,GAAN,OAAUA,EAAEC,gBAAZ,aAAgC,IAAI7G,KAAK4G,EAAEL,OAAOC,cAAlD,YAAmE,IAAIxG,KAAK4G,EAAEH,KAAKD,eAGxEM,OCQK,SAAC,GAA6D,ICGlC1G,EDHzBwD,EAA0D,EAA1DA,oBAAqBmD,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SACxDC,EAActG,qBAAWuG,GAC/B,EAAgC/I,mBAAS,MAAzC,mBAAQgJ,EAAR,KAAiBC,EAAjB,KACA,EAA8BjJ,mBAAS,MAAvC,mBAAQoH,EAAR,KAAgB8B,EAAhB,KACA,EACItJ,GCFwCoC,EDEC6G,EAAS7G,OCD/C,sDAC6BA,EAD7B,8JDCwD,6BAD/D,mBAAQmH,EAAR,KAAiBC,EAAjB,KAGA7I,qBAAU,WACN,sBAAC,4BAAAC,EAAA,sEACyB4E,EAAkByD,EAAS7G,QADpD,OACSgH,EADT,OAEGC,EAAWD,GAFd,0CAAD,KAID,CAACH,EAAS7G,SAEbzB,qBAAU,WACN,sBAAC,4BAAAC,EAAA,uDACQ4I,GAAkBD,GAAWA,EAAQ3J,SAChC4H,EAAS+B,EAAQE,MAAK,SAACb,GAC1B,OAAOA,EAAEnB,WAAayB,EAAYzB,YAErC6B,EAAU9B,GAAU+B,EAAQ,KALnC,0CAAD,KAQD,CAACL,EAAYzB,SAAU8B,EAASC,IAEnC,IAAME,GAAUF,GAAkBhC,GAAUA,EAAOC,SAC/C,kBAACkC,EAAA,EAAD,CAAQ5D,MAAOyB,EAAOC,SAAUmC,SAAU,SAACC,GAAD,OACtCP,EAAUC,EAAQE,MAAK,SAAAb,GAAC,OAAIA,EAAEnB,WAAaoC,EAAEC,OAAO/D,YAEnDwD,EAAQQ,KAAI,SAACnB,GAAD,OAAO,kBAACoB,EAAA,EAAD,CAAUC,IAAKrB,EAAEnB,SAAU1B,MAAO6C,EAAEnB,UACnDiB,GAAsBE,QAEnB,KAEhB,OAAO,oCACFQ,EAAU,kBAACjB,EAAA,EAAD,CAAM+B,WAAS,GACtB,kBAAC/B,EAAA,EAAD,CAAM+B,WAAS,EAACC,QAAQ,gBACpB,kBAAChC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,IAAD,CAAWgC,QAAQ,YAAYC,MAAM,YAAYxL,QAAS,kBAAMkK,KAAUuB,UAAW,kBAAC,IAAD,OAArF,SAEJ,kBAACnC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACD,EAAA,EAAD,CAAM+B,WAAS,EACXK,UAAU,SACVJ,QAAQ,SACRK,WAAW,UACX,0BAAMpC,MAAI,GAAC,wBAAIhJ,UAAU,eAAe6J,EAAS1J,KAAtC,wBACX,0BAAM6I,MAAI,GAAEsB,IAEhB,kBAACvB,EAAA,EAAD,CAAM+B,WAAS,EACXK,UAAU,SACVJ,QAAQ,SACRK,WAAW,UACX,yBAAKvH,IAAKgG,EAAS7D,KAAMhG,UAAU,YAAY8D,IAAG,UAAK+F,EAAS1J,KAAd,YAEtD,yBAAKH,UAAU,eAAe6J,EAAS5D,OAAvC,KAAiD4D,EAAS1D,MAC1D,yBAAKnG,UAAU,eAAf,aAAwC6J,EAAS3D,SAASgD,eAAe,eAC5DmC,IAAZrB,GAAyB,yBAAKhK,UAAU,eAAf,oBAA+CgK,EAAQsB,SAAWtB,EAAQuB,UAAY,IAAMvB,EAAQwB,WAElI,kBAACzC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACyC,EAAD,CAAcjF,oBAAqBA,KAEvC,kBAACuC,EAAA,EAAD,CAAMC,MAAI,GACLZ,EAAS,kBAAC,EAAD,CAAUlC,SAAU2D,EAAS3D,SAAUlD,OAAQ6G,EAAS7G,OAAQoF,OAAQA,IAAa,kBAAC,EAAD,KAAS,gEAIhH,kBAACW,EAAA,EAAD,CAAM+B,WAAS,EACXK,UAAU,MACVJ,QAAQ,eACRK,WAAW,SACX,kBAACrC,EAAA,EAAD,CAAMC,MAAI,IAEV,kBAACD,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,EAAD,CAAQrJ,IAAE,EAACH,OAAK,EAACC,QAAS,kBAAMmK,MAAhC,uBAIZ,kBAAC,EAAD,KAAS,4D,uCEjEF8B,GAnBE,SAAC,GAA6C,EAA5C/F,cAA6C,IAA9BgG,EAA6B,EAA7BA,cAAe9B,EAAc,EAAdA,SACvC1J,EAAO0J,EAAS1J,KACtB,OAAO,kBAACyL,GAAA,EAAD,CAAM5L,UAAU,aACnB,kBAAC6L,GAAA,EAAD,KACI,yBAAK7L,UAAU,gBACX,yBAAK6D,IAAKgG,EAAS7D,KAAMlC,IAAG,UAAK3D,EAAL,aAGpC,kBAAC2L,GAAA,EAAD,KACI,kBAAC,EAAD,CAAQrM,QAAS,kBAAMkM,EAAc9B,IAAWrK,OAAK,GAArD,WAA+DW,MCd5D4L,GCYO,SAAC,GAAsB,IAApBnC,EAAmB,EAAnBA,aACfE,EAActG,qBAAWwI,GACzBtJ,EAAOc,qBAAWN,GAClByC,EAAgBmE,EAAYzB,SAClC,EChBW,SAAyBwC,EAAKoB,GAGzC,MAAsCjL,oBAAS,WAC7C,IAEE,IAAMgI,EAAOkD,OAAOC,aAAaC,QAAQvB,GAEzC,OAAO7B,EAAOlH,KAAKuK,MAAMrD,GAAQiD,EACjC,MAAO5J,GAGP,OADA+C,QAAQK,IAAIpD,GACL4J,MATX,mBAAOK,EAAP,KAAoBC,EAApB,KA8BA,MAAO,CAACD,EAfS,SAAA3F,GACf,IAEE,IAAM6F,EACJ7F,aAAiB8F,SAAW9F,EAAM2F,GAAe3F,EAEnD4F,EAAeC,GAEfN,OAAOC,aAAaO,QAAQ7B,EAAK/I,KAAKC,UAAUyK,IAChD,MAAOnK,GAEP+C,QAAQK,IAAIpD,MDbsCsK,CAAgB,uBAAwB,IAA9F,mBAAQC,EAAR,KAA4BC,EAA5B,KACA,EAA4B7L,mBAAS,IAArC,mBAAQ8L,EAAR,KAAeC,EAAf,KACA,EAA0C/L,mBAAS,MAAnD,mBAAQgM,EAAR,KAAsBC,EAAtB,KACA,EAA0CjM,mBAAS,MAAnD,mBAAQkM,EAAR,KAAsBC,EAAtB,KACA,EACOvM,EACE2B,EAAYuH,EAAYzB,SAAU2E,EAActK,GAChD,kBAAkB,GAH3B,mBAAQ0K,EAAR,KAA8BC,EAA9B,KAAqDhL,EAArD,KAA4DiL,EAA5D,KAA+EC,EAA/E,KA8CA,OAzCAhM,qBAAU,WACN,sBAAC,8BAAAC,EAAA,2DACSoE,EAAqBgH,EAAmBjH,IADjD,gBAGOoH,EAASnH,GAHhB,sCAKwC4H,EAAY9H,kBAAkBC,GALtE,OAKa8H,EALb,OAMO9I,QAAQ+I,IACJD,EAAmB9C,IAAnB,uCAAuB,WAAOgD,GAAP,eAAAnM,EAAA,sEACMgM,EAAY3H,kBAAkB8H,EAAS3K,QAD7C,cACb4K,EADa,QAER5K,OAAS2K,EAAS3K,OAFV,kBAGZ4K,GAHY,2CAAvB,wDAKF9I,MAAK,SAACgI,GACJC,EAASD,GACTD,EAAsB,2BAAID,GAAL,kBAA0BjH,EAAiBmH,QAd3E,0CAAD,KAkBD,IAEHvL,qBAAU,WACN,sBAAC,4BAAAC,EAAA,0DACOwL,EADP,gCAEkChF,EAAuBrC,GAFzD,OAEauH,EAFb,OAGOC,EAAgBD,GAHvB,0CAAD,KAMD,CAACF,IAEJzL,qBAAU,WACF6L,IAAyB/K,GACzBuH,EAAawD,EAAqBS,OAAO7K,UAE9C,CAACoK,IAOGN,EAAMtM,OAAS,EAClBwM,GAAgBE,EAChB,oCACI,kBAAC,GAAD,CACIvD,OAAQ,kBAAMsD,EAAgB,OAC9BzG,oBAAqB0G,EACrBrD,SAAUmD,EACVpD,aAZZ,WACI2D,EAAYhL,EAAYuH,EAAYzB,SAAU2E,EAActK,IAC5D4K,GAAkB,MAYbD,GAAyB,kBAAC,EAAD,uBACzBhL,GAAS,sDAA4BA,IAG1C,yBAAKrC,UAAU,cACV8M,EAAMnC,KAAI,SAACmD,GACR,OAAO,kBAAC,GAAD,CACHjD,IAAKiD,EAAE9K,OACP2I,cAAe,SAAC9B,GAAD,OAAcoD,EAAgBpD,IAC7CA,SAAUiE,QAIxB,kBAAC,EAAD,OExBSC,I,OAvDI,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcpE,EAAkB,EAAlBA,aAC/B,EAA4B5I,mBAAS,OAArC,mBAAOiN,EAAP,KACA,GADA,KACkDjN,mBAAS,OAA3D,mBAAOkN,EAAP,KAAuBC,EAAvB,KAEA,OAAOH,EAAaxN,QAChB,6BAASR,UAAU,WAEf,yBAAKA,UAAW,iCAAkCsE,MAAO,CAAC2G,MAAO,OAAQmD,SAAU,WAC/E,0BAAMpO,UAAW,cAAesE,MAAO,CAACsD,MAAO,QAA/C,mEACA,0BAAM5H,UAAW,eAAjB,eAGQ,QAAXiO,GACGD,EAAaK,QAAO,SAAAC,GAAC,OAAKA,EAAEnO,KAAKoO,SAAS,SAClB,OAAnBL,GAA2BA,IAAmBI,EAAEjG,aAAWmG,MAAK,SAAChN,EAAGiN,GAAJ,OAAUjN,EAAEkN,KAAOD,EAAEC,KAAO,GAAK,KAAG/D,KAAI,SAACgE,GAC9G,OAAO,kBAACC,EAAA,EAAD,CAAW/D,IAAK8D,EAAKtG,SAAUmC,SAAU,SAACqE,EAAIC,GACjDX,EAAuBW,EAAWH,EAAKtG,SAAW,OACnDrI,UAAU,kBAAkB+O,gBAAiB,CAAEC,eAAe,IAC7D,kBAACC,EAAA,EAAD,CACIC,WAAY,kBAAC,IAAD,MACZC,gBAAc,kBACdC,GAAG,kBACFT,EAAKxO,MAEV,kBAACkP,EAAA,EAAD,KACI,kBAAC,EAAmBC,SAApB,CAA6B3I,MAAOgI,GAChC,kBAAC,GAAD,CAAe/E,aAAcA,aCnC1C2F,GCKa,WACxB,IAAMC,EPPC,mFOO6C,UPP7C,iFOQP,EAII5O,EAAS4O,EAAmB,gBAJhC,mBACIC,EADJ,KAEIC,EAFJ,KAGIC,EAHJ,KAKIrM,EAAUC,cAYd,OAAOkM,GAA2BC,GAAwBC,EANnCD,EACnBC,EACI,0DACA,kBAAC,EAAD,KAAUA,GACZ,KAGF,kBAAC,GAAD,CAAY3B,aAAcyB,EAAwB7F,aAXtD,SAAsB5G,GAClBM,EAAQM,KAAK,cAAgBZ,OCgDtB4M,OAnDf,WACE,MAA0B5O,mBAAS,MAAnC,mBAAQ0B,EAAR,KAAcmN,EAAd,KAsBA,OApBAtO,qBAAU,WACR,sBAAC,gCAAAC,EAAA,sEACwBsO,EAAY5K,cADpC,UACO6K,EADP,wEAIyBD,EAAYrL,eAAeuL,SAASD,EAAS9M,SAJtE,UAM0B,KAFnBgN,EAJP,QAMezP,OANf,kCAO8BsP,EAAYxK,WAAWyK,GAPrD,SAOWG,EAPX,QAQgB7N,MAAMC,QACb8C,QAAQ/C,MAAM,0BAA2B6N,EAAW7N,MAAMC,SAC1DuN,EAAQK,EAAWrC,QAV5B,wBAYKgC,EAAQI,EAAU,IAZvB,2CAAD,KAeC,IAIIvN,GACL,kBAAC,EAAY4M,SAAb,CAAsB3I,MAAOjE,GAC3B,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAK8D,IAAI,qBAAqBD,IAAKsM,KAEnC,kBAACC,EAAA,EAAD,CAAeC,MAAOA,GACpB,kBAAC,IAAD,CAAQC,SATmC,QAUzC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,QAChB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,sBAChB,kBAACrM,EAAD,OAEF,kBAAC,IAAD,CAAOqM,KAAK,KACV,kBAAC,EAAD,aC5CEC,QACW,cAA7BvE,OAAO1G,SAASkL,UAEe,UAA7BxE,OAAO1G,SAASkL,UAEhBxE,OAAO1G,SAASkL,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFzQ,SAAS0Q,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpM,MAAK,SAAAqM,GACJA,EAAaC,gBAEdpM,OAAM,SAAA3C,GACL+C,QAAQ/C,MAAMA,EAAMC,c","file":"static/js/main.16b19e64.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './button.scss';\r\n\r\nconst Button = ({children, green, onClick, primary, lg ,link, secondary}) => {\r\n    let classes = 'button ';\r\n    classes += primary ? 'primary-btn' : '';\r\n    classes += secondary ? 'secondary-btn' : '';\r\n    classes += green ? 'green-btn' : '';\r\n    classes += lg ? ' lg-btn' : ' md-btn';\r\n    return (<a href={link} className={classes} onClick={onClick}>\r\n        {children}\r\n    </a>);\r\n}\r\n\r\nButton.default = {\r\n    link: ''\r\n}\r\n\r\nButton.propTypes = {\r\n    green: PropTypes.bool,\r\n    primary: PropTypes.bool\r\n}\r\n \r\nexport default Button;","export function getCookie(name) {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop().split(';').shift();\r\n}\r\n\r\nexport const standardHeaders = {\r\n  'Content-Type': 'application/json',\r\n  'Accept': 'application/json',\r\n  'Authorization': 'Bearer ' + getCookie('token')\r\n};","import { useState, useEffect } from \"react\";\r\nimport { standardHeaders } from '../services/common';\r\n \r\nfunction useFetch(query, returnObjectName = \"\", run = true) {\r\n    const [runNow, setRunNow] = useState(run);\r\n    const [thisQuery, setQuery] = useState(query);\r\n    const [rtnObj, setRtnObj] = useState({});\r\n   \r\n    useEffect(() => {\r\n      (async () => {\r\n        if (runNow) {\r\n          try {\r\n            const response = await fetch(process.env.REACT_APP_GRAPH_SERVER, { \r\n              method: 'POST',\r\n              headers: standardHeaders,\r\n              body: JSON.stringify({ query:thisQuery })\r\n            });\r\n            const json = await response.json();\r\n    \r\n            if (json) {\r\n              if (returnObjectName) {\r\n                setRtnObj((previousState) => ({\r\n                    ...previousState, \r\n                    ...{ \r\n                      loading: false,\r\n                      data: json.data[returnObjectName]\r\n                    }\r\n                  }));\r\n              } else {\r\n                setRtnObj((previousState) => ({\r\n                  ...previousState, \r\n                  ...{\r\n                    loading: false,\r\n                    data: json.data\r\n                  }\r\n                }));\r\n              }\r\n            }\r\n          } catch (error) {\r\n            setRtnObj((previousState) => ({\r\n                ...previousState,\r\n                ...{\r\n                  loading: false,\r\n                  data: null,\r\n                  error: error.message\r\n                }\r\n            }));\r\n          }\r\n          setRunNow(false);\r\n        }\r\n      })();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [runNow]);\r\n\r\n    return [ rtnObj.data, rtnObj.loading, rtnObj.error, setRunNow, setQuery ];\r\n}\r\n \r\nexport default useFetch;","import dayjs from 'dayjs';\r\n\r\nexport function getGameTeam(userId) {\r\n    return userId ? `query { gameTeams(filter: `+\r\n            `{ userId: ${userId}}) {` + \r\n                    `teamId\r\n                    userId\r\n                    startDate\r\n                    endDate\r\n                    currentLeagueId\r\n                }}` : '';\r\n}\r\n\r\nexport function setGameTeam(currentLeagueId, team, user) {\r\n    const today = new Date();\r\n    const startDate = dayjs(today).format('YYYY-MM-DD');\r\n    return `mutation { createGameTeam(record: {` +\r\n        `teamId: ${team ? team.teamId : ''},` +\r\n        `userId: ${user ? user.userId : ''}, ` +\r\n        `startDate: \"${startDate}\", ` +\r\n        `currentLeagueId: ${currentLeagueId}` +\r\n    `}) {\r\n        recordId\r\n        record {\r\n            teamId\r\n        }\r\n        error {\r\n            __typename\r\n        }\r\n    }}`;\r\n}\r\n","import React from 'react';\r\n\r\nconst UserContext = React.createContext('user');\r\n\r\nexport default UserContext;","import React, { useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from '../components/button/button';\r\nimport './Start.scss';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { getGameTeam } from '../services/game';\r\nimport UserContext from '../context/userContext';\r\n\r\nconst Start = () => {\r\n    let history = useHistory();\r\n    const user = useContext(UserContext);\r\n    const [ gameTeam, gameTeamLoading, gameTeamError ]\r\n       = useFetch(getGameTeam(user ? user.userId : null), \"gameTeams\");\r\n\r\n    function startGame() {\r\n        history.push('/new');\r\n    }\r\n\r\n    if (gameTeam && !gameTeamError) {\r\n        history.push('/clubhouse/' + gameTeam.teamId);\r\n    }\r\n\r\n    return !gameTeamLoading && <div className=\"app-start\">\r\n            <div className=\"heading\">\r\n                <div className=\"text-logo-left\">\r\n                    <img src={process.env.PUBLIC_URL + '/LogoFFOText.svg'} className=\"text-logo\" alt=\"logo\" />\r\n                </div>\r\n                <div className=\"text\">Welcome to Fantasy Football Owner {document.cookie['userName']}</div>\r\n                <div className=\"text-logo-right\">\r\n                    <img src={process.env.PUBLIC_URL + '/LogoFFOText.svg'} className=\"text-logo\" alt=\"logo\" />\r\n                </div>\r\n            </div>\r\n            <section className=\"app-start-action\">\r\n                <span>This is a Fantasy Football game based on real events/data</span>\r\n                <span>Manager transitions, player crises, financial ruin?! This is fantasy football like no other.</span>\r\n                <span>Legal notice: this is a non-comercial/amateur game. Players/users do not pay for any service.</span>\r\n                <Button green lg onClick={startGame}>Start new game</Button>\r\n            </section>\r\n        </div>;\r\n}\r\n \r\nexport default Start;","const { createMuiTheme } = require(\"@material-ui/core\");\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n        // Light Green\r\n        main: '#69bb31',\r\n        },\r\n        secondary: {\r\n        // Red\r\n        main: '#8f214d',\r\n        },\r\n    },\r\n});","export default __webpack_public_path__ + \"static/media/bgPattern.42364d20.svg\";","import React from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nexport function Clubhouse() {\r\n    const params = useParams(\"teamId\");\r\n    return <div style={{position: \"absolute\"}}>clubhouse for team: {params.teamId}</div>;\r\n}","import { getCookie } from '../common';\r\n\r\nexport default class TeamServices {\r\n    static getUsersFromId = (twitterId) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query getUsers {\r\n                    users(filter: { twitterId: ${twitterId} }) {\r\n                      screenName\r\n                      name\r\n                      location\r\n                      authLevel\r\n                      userId\r\n                    }\r\n                  }`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                accept(response.data.users);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n\r\n    static getUserInfo = () => {\r\n        if (process.env.NODE_ENV === \"production\") {\r\n            return new Promise((accept, reject) => {\r\n                fetch(process.env.REACT_APP_GRAPH_SERVER.replace('graphql', 'api/user'),\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Authorization': 'Bearer ' + getCookie('token')\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    console.info && console.info(response.user);\r\n                    accept(response.user);\r\n                }).catch((err) => {\r\n                    reject(err);\r\n                })\r\n            });\r\n        } else {\r\n            return new Promise((accept, reject) => {\r\n                accept({\r\n                    userId: 1234\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    static createUser = ({ name, screenName, location, userId }) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `mutation addUser { \r\n                    createUser(record:{ twitterId: ${userId}, screenName: \"${screenName}\", name: \"${name}\", location: \"${location}\", authLevel: PLAYER}) {\r\n                    recordId,\r\n                    record {\r\n                      name\r\n                      userId\r\n                      screenName\r\n                      location\r\n                      authLevel\r\n                    },\r\n                    error {\r\n                      message\r\n                    }\r\n                  }\r\n                }`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.data);\r\n                accept(response.data);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n}","import { getCookie } from '../common';\r\n\r\nexport default class TeamServices {\r\n    static getTeamsForLeague = (competitionId) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { teamsInCompetition(competitionId: ${competitionId}) {` + \r\n                    `teamId\r\n                    standing\r\n                    competitionId\r\n                }}`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.data);\r\n                accept(response.data.teamsInCompetition);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        );\r\n    }\r\n\r\n    static getTeamFromTeamId = (teamId) => {\r\n        return new Promise((accept, reject) => \r\n            fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { getTeam(filter: { teamId: ${teamId} }) {` + \r\n                    `name \r\n                     logo\r\n                     _id\r\n                     ground {\r\n                        name\r\n                        capacity\r\n                        city\r\n                      }\r\n                }}`})\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response.data.getTeam);\r\n                const team = response.data.getTeam;\r\n                accept({\r\n                    name: team.name,\r\n                    _id: team._id,\r\n                    logo: team.logo,\r\n                    ground: team.ground.name,\r\n                    capacity: team.ground.capacity,\r\n                    city: team.ground.city\r\n                });\r\n            }).catch((err) => {\r\n                reject(null, err);\r\n            })\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Loading.scss';\r\n\r\nconst loading = ({children}) => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"loading-text-container\">\r\n                {children ? children : <div>loading...</div>}\r\n            </div>\r\n            <div className=\"app-logo-container\">\r\n                <img src={'MainLogo.svg'} className=\"app-logo-loading\" alt=\"ball-logo\" />\r\n            </div>\r\n        </div>);\r\n}\r\n \r\nexport default loading;","import Button from \"./button\";\r\n\r\nexport default Button;","import { standardHeaders } from '../common';\r\n\r\nexport default async function getCurrentManager(teamId) {\r\n    try {\r\n        const response = await fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: standardHeaders,\r\n                body: JSON.stringify({\r\n                    query: `query { coaches(filter: { currentTeamId: ${teamId} }) {` + \r\n                    `firstName\r\n                    lastName\r\n                    knownAs\r\n                    career {\r\n                        teamId,\r\n                        start,\r\n                        end\r\n                    }\r\n                }}`})\r\n            });\r\n        \r\n        const jsonResponse = await response.json();\r\n        return jsonResponse.data.coaches[0];\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import React from 'react';\r\nimport { RadialChart } from 'react-vis';\r\n\r\nconst BroadcastingAnalysis = ({ broadcastingRevenue }) => {\r\n    const myData = [];\r\n    const getFloat = (value, label) => {\r\n        if (value) {\r\n            const flVal = parseFloat(value);\r\n            myData.push({ angle: flVal, label: `£${flVal.toFixed(1)}m`, subLabel: `${label}`});\r\n            return flVal;\r\n        } else {\r\n            return 0;\r\n        };\r\n    }\r\n\r\n    const equalShare = getFloat(broadcastingRevenue.equalShare, \"Equal Share\");\r\n    const basicAward = getFloat(broadcastingRevenue.basicAward, \"Basic Award\");\r\n    const solidarity = getFloat(broadcastingRevenue.solidarity, \"Solidarity\");\r\n    const featured = getFloat((broadcastingRevenue.minimumFeaturedGames + 1) * broadcastingRevenue.facilityFeePerGame, \"Featured Game Facility Fees\");\r\n    const overseasPaymentMin = getFloat(broadcastingRevenue.overseasPaymentMin, \"Overseas\");\r\n    const centralCommercial = getFloat(broadcastingRevenue.centralCommercial, \"Central Commercial\");\r\n    const totalRevenue = (equalShare + basicAward + solidarity + featured + overseasPaymentMin + centralCommercial).toFixed(1);\r\n\r\n    return <>\r\n        <span>Minimum Estimated Broadcasting Revenue: £{totalRevenue}m</span>\r\n        {myData.length > 0 || myData[0].value === \"0.0\" ? \r\n            <RadialChart\r\n                colorType=\"linear\"\r\n                colorDomain={[0, 2]}\r\n                data={myData}\r\n                width={300}\r\n                height={250} showLabels labelsAboveChildren \r\n                className={\"broadcasting-radial\"} />\r\n            : \r\n            <div>No information found for broadcasting</div>}\r\n    </>;\r\n}\r\n\r\nexport default BroadcastingAnalysis;","import { getCookie } from '../common';\r\n\r\nexport default async function getBroadcastingRevenue (competitionId) {\r\n    try {\r\n        const response = await fetch(process.env.REACT_APP_GRAPH_SERVER,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'Authorization': 'Bearer ' + getCookie('token')\r\n                },\r\n                body: JSON.stringify({query: `query { broadcastRevenue(filter: { competitionId: ${competitionId} }) {` + \r\n                    `equalShare\r\n                    basicAward\r\n                    solidarity\r\n                    meritStart\r\n                    centralCommercial\r\n                    overseasPaymentMin\r\n                    minimumFeaturedGames\r\n                    facilityFeePerGame\r\n                }}`})\r\n            });\r\n        \r\n        const jsonResponse = await response.json();\r\n        return jsonResponse.data.broadcastRevenue[0];\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import getBroadcastingRevenue from './getBroadcastingRevenue';\r\n\r\nexport function getAttendence(competitionId, teamId) {\r\n    return `query { attendances(filter: `+\r\n            `{ competitionId: ${competitionId}, teamId: ${teamId} }) {` + \r\n                    `attendance\r\n                    seasonTickets\r\n                }}`;\r\n}\r\n\r\nexport {\r\n    getBroadcastingRevenue\r\n}","import { Grid } from '@material-ui/core';\r\nimport React, { useEffect } from 'react'\r\nimport { RadialChart } from 'react-vis';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport { getAttendence } from '../../services/financial';\r\nimport { formatCompetitionName } from '../teamanalyse';\r\nimport { Loading } from '../loading';\r\n\r\nconst Matchday = ({ capacity, season, teamId }) => {\r\n    const [ attendanceInfos, attendanceInfosLoading, attError, reRun, setQuery ] = \r\n        useFetch(getAttendence(season.leagueId, teamId), 'attendances');\r\n\r\n    console.log(attendanceInfos, attendanceInfosLoading, attError);\r\n    useEffect(() => {\r\n        setQuery(getAttendence(season.leagueId, teamId));\r\n        reRun(true);\r\n    }, [season.leagueId, reRun, setQuery, teamId]);\r\n\r\n    const attendanceInfo = attendanceInfos && attendanceInfos.length ? attendanceInfos[0] : null;\r\n    \r\n    const seasonTickets = attendanceInfo ? attendanceInfo.seasonTickets : 0;\r\n    const matchdayTickets = attendanceInfo ? attendanceInfo.attendance - seasonTickets : 0;\r\n    const unsoldTickets = attendanceInfo ? capacity - attendanceInfo.attendance : 0;\r\n\r\n    if (attendanceInfosLoading) {\r\n        return <Loading />;\r\n    }\r\n    return attendanceInfo && !attError ? \r\n            <div>\r\n                <Grid item xs={8}>\r\n                    <div>Average attendance: {attendanceInfo.attendance.toLocaleString(\"en-GB\")}</div>\r\n                    <div>For {season.name} {new Date(season.start).getFullYear()}/{new Date(season.end).getFullYear()}</div>\r\n                    <RadialChart\r\n                        colorType=\"linear\"\r\n                        colorDomain={[0, 3]}\r\n                        data={[\r\n                            { angle: matchdayTickets, label: `Matchday tickets: ${matchdayTickets.toLocaleString(\"en-GB\")}`} , \r\n                            { angle: seasonTickets,  label: `Season tickets: ${seasonTickets.toLocaleString(\"en-GB\")}`},\r\n                            { angle: unsoldTickets,  label: `Unsold: ${unsoldTickets.toLocaleString(\"en-GB\")}`}\r\n                        ]}\r\n                        width={300}\r\n                        height={250} showLabels labelsAboveChildren \r\n                        className={\"matchday-radial\"} \r\n                    />  \r\n                </Grid>\r\n            </div> : <div>\r\n                        <span>No data for {formatCompetitionName(season)}</span>\r\n                    </div>;\r\n}\r\n\r\n\r\nexport default Matchday;\r\n","import React from 'react';\r\n\r\nconst context = React.createContext('competition');\r\n\r\nexport default context;","import TeamAnalyse from \"./TeamAnalyse\";\r\n\r\nexport function formatCompetitionName(s) {\r\n    return `${s.competitionName}: ${new Date(s.start).getFullYear()}/${new Date(s.end).getFullYear()}`;\r\n}\r\n\r\nexport default TeamAnalyse;","import React, { useContext, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../button';\r\nimport { Button as MatButton, Grid, MenuItem, Select } from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { Loading } from '../loading';\r\nimport './TeamAnalyse.scss';\r\nimport { getPreviousLeagueSeasonsForTeam } from '../../services/competition';\r\nimport { getCurrentManager } from '../../services/team';\r\nimport { Broadcasting, Matchday } from '../analysis';\r\nimport competitionContext from '../../context/competitionContext';\r\nimport { formatCompetitionName } from './';\r\nimport useFetch from '../../hooks/useFetch';\r\n\r\nconst TeamAnalyse = ({ broadcastingRevenue, onBack, onTeamSelect, teamInfo }) => {\r\n    const competition = useContext(competitionContext);\r\n    const [ manager, setManager ] = useState(null);\r\n    const [ season, setSeason ] = useState(null);\r\n    const [ seasons, seasonsLoading ] = \r\n        useFetch(getPreviousLeagueSeasonsForTeam(teamInfo.teamId), \"leagueCompetitionsForTeam\")\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const manager = await getCurrentManager(teamInfo.teamId);\r\n            setManager(manager);\r\n        })();\r\n    }, [teamInfo.teamId]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (!seasonsLoading && seasons && seasons.length) {\r\n                const season = seasons.find((s) => {\r\n                   return s.leagueId === competition.leagueId;\r\n                });\r\n                setSeason(season || seasons[0]);   \r\n            }\r\n        })();\r\n    }, [competition.leagueId, seasons, seasonsLoading]);\r\n    \r\n    const select = !seasonsLoading && season && season.leagueId ?\r\n        <Select value={season.leagueId} onChange={(e) => \r\n            setSeason(seasons.find(s => s.leagueId === e.target.value))\r\n        } >\r\n            {seasons.map((s) => <MenuItem key={s.leagueId} value={s.leagueId}>\r\n                {formatCompetitionName(s)}\r\n            </MenuItem>)}\r\n        </Select> : null;\r\n        \r\n    return <>\r\n        {manager ? <Grid container>\r\n            <Grid container justify=\"space-around\">\r\n                <Grid item>\r\n                    <MatButton variant=\"contained\" color=\"secondary\" onClick={() => onBack()} startIcon={<ArrowBackIcon />}>Back</MatButton>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\">\r\n                        <grid item><h3 className=\"text-center\">{teamInfo.name} Financial Analysis</h3></grid>\r\n                        <grid item>{select}</grid>\r\n                    </Grid>\r\n                    <Grid container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\">\r\n                        <img src={teamInfo.logo} className=\"team-logo\" alt={`${teamInfo.name} logo`} />\r\n                    </Grid>\r\n                    <div className=\"text-center\">{teamInfo.ground}, {teamInfo.city}</div>\r\n                    <div className=\"text-center\">Capacity: {teamInfo.capacity.toLocaleString(\"en-GB\")}</div>\r\n                    {manager !== undefined && <div className=\"text-center\">Current Manager: {manager.knownAs || manager.firstName + ' ' + manager.lastName}</div>}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Broadcasting broadcastingRevenue={broadcastingRevenue} />\r\n                </Grid>\r\n                <Grid item>\r\n                    {season ? <Matchday capacity={teamInfo.capacity} teamId={teamInfo.teamId} season={season} /> : <Loading><div>Loading Matchday Information</div></Loading>}\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <Grid container\r\n                direction=\"row\"\r\n                justify=\"space-around\"\r\n                alignItems=\"right\">\r\n                <Grid item>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button lg green onClick={() => onTeamSelect()}>Select this team</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid> : \r\n        <Loading><div>Finding team information</div></Loading>}\r\n    </>;\r\n}\r\n\r\nTeamAnalyse.propTypes = {\r\n    broadcastingRevenue: PropTypes.object.isRequired,\r\n    onTeamSelect: PropTypes.func.isRequired,\r\n    teamInfo: PropTypes.object.isRequired\r\n}\r\n \r\nexport default TeamAnalyse;","export const getCompetitionsForCountry = (country) => {\r\n    return 'query { competitions(filter: { AND: [' + \r\n            `{ isCurrent: true }, { country: \"${country}\" },` +\r\n            '{ type: LEAGUE }]})' + \r\n            '{ name leagueId isCurrent tier logo country start}}';\r\n}\r\n\r\nexport const getPreviousSeasonsForTier = (tier, country) => {\r\n    return `query { competitions(filter:` +\r\n    `{ isCurrent: false, tier: ${tier}, country: \"${country}\" }, sort: START_DATE_DESC) { ` +\r\n            `name\r\n            leagueId\r\n            start\r\n            end\r\n    }}`;\r\n}\r\n\r\nexport const getPreviousLeagueSeasonsForTeam = (teamId) => {\r\n    return `query { ` +\r\n    `leagueCompetitionsForTeam(teamId:${teamId}) { ` +\r\n            `teamId\r\n            competitionId\r\n            leagueId\r\n            year\r\n            start\r\n            end\r\n            competitionName\r\n    }}`;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '../button';\r\n\r\nconst TeamCard = ({competitionId, onAnalyseTeam, teamInfo}) => {\r\n    const name = teamInfo.name;\r\n    return <Card className=\"team-card\">\r\n        <CardContent>\r\n            <div className=\"team-content\">\r\n                <img src={teamInfo.logo} alt={`${name} logo`}/>\r\n            </div>\r\n        </CardContent>\r\n        <CardActions>\r\n            <Button onClick={() => onAnalyseTeam(teamInfo)} green>Analyse {name}</Button>\r\n        </CardActions>\r\n    </Card>;\r\n}\r\n\r\nTeamCard.propTypes = {\r\n    onAnalyseTeam: PropTypes.func,\r\n    teamInfo: PropTypes.object\r\n}\r\n \r\nexport default TeamCard;","import TeamsInLeague from \"./TeamsInLeague\";\r\n\r\nexport default TeamsInLeague;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport TeamQueries from '../../services/team/get';\r\nimport { Loading } from '../loading';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\nimport TeamAnalyse from '../teamanalyse';\r\nimport './TeamsInLeague.scss';\r\nimport TeamCard from './TeamCard';\r\nimport { getBroadcastingRevenue } from '../../services/financial';\r\nimport CompetitionContext from '../../context/competitionContext';\r\nimport { setGameTeam } from '../../services/game';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport UserContext from '../../context/userContext';\r\n\r\nconst TeamsInLeague = ({ onTeamSelect }) => {\r\n    const competition = useContext(CompetitionContext);\r\n    const user = useContext(UserContext);\r\n    const competitionId = competition.leagueId;\r\n    const [ teamsByCompetition, setTeamsByCompetition ] = useLocalStorage('teamsByCompetitionId', []);\r\n    const [ teams, setTeams ] = useState([]);\r\n    const [ selectedTeam, setSelectedTeam ] = useState(null);\r\n    const [ broadcasting, setBroadcasting ] = useState(null);\r\n    const [ createGameTeamResult, createGameTeamLoading, error, runCreateGameTeam, updateQuery ]\r\n         = useFetch(\r\n             setGameTeam(competition.leagueId, selectedTeam, user), \r\n             'createGameTeam', false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const teamsInCompetition = teamsByCompetition[competitionId];\r\n            if (teamsInCompetition) {\r\n                setTeams(teamsInCompetition);\r\n            } else {\r\n                const teamInCompetitions = await TeamQueries.getTeamsForLeague(competitionId);\r\n                Promise.all(\r\n                    teamInCompetitions.map(async (teamComp) => {\r\n                        const teamDetail = await TeamQueries.getTeamFromTeamId(teamComp.teamId);\r\n                        teamDetail.teamId = teamComp.teamId;\r\n                        return teamDetail;\r\n                    })\r\n                ).then((teams) => {\r\n                    setTeams(teams);\r\n                    setTeamsByCompetition({...teamsByCompetition, [competitionId] : teams });\r\n                });\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (selectedTeam) {\r\n                const broadcasting = await getBroadcastingRevenue(competitionId);\r\n                setBroadcasting(broadcasting);\r\n            }\r\n        })();\r\n    }, [selectedTeam]);\r\n\r\n    useEffect(() => {\r\n        if (createGameTeamResult && !error) {\r\n            onTeamSelect(createGameTeamResult.record.teamId);\r\n        }\r\n    }, [createGameTeamResult])\r\n\r\n    function setTeamToUser() {\r\n        updateQuery(setGameTeam(competition.leagueId, selectedTeam, user));\r\n        runCreateGameTeam(true);\r\n    }\r\n\r\n    return teams.length > 0 ? \r\n        selectedTeam && broadcasting ? \r\n        <>\r\n            <TeamAnalyse \r\n                onBack={() => setSelectedTeam(null)} \r\n                broadcastingRevenue={broadcasting} \r\n                teamInfo={selectedTeam}\r\n                onTeamSelect={setTeamToUser} \r\n            />\r\n            {createGameTeamLoading && <Loading>Please wait...</Loading>}\r\n            {error && <div>Error selecting team: {error}</div>}\r\n        </>\r\n        :\r\n        <div className=\"team-cards\">\r\n            {teams.map((t) => {\r\n                return <TeamCard \r\n                    key={t.teamId}\r\n                    onAnalyseTeam={(teamInfo) => setSelectedTeam(teamInfo)}\r\n                    teamInfo={t} \r\n                />\r\n            })}\r\n        </div>\r\n    : <Loading></Loading>;\r\n}\r\n \r\nexport default TeamsInLeague;","import { useState } from 'react';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // If error also return initialValue\r\n        console.log(error);\r\n        return initialValue;\r\n      }\r\n    });\r\n  \r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = value => {\r\n      try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n        console.log(error);\r\n      }\r\n    };\r\n  \r\n    return [storedValue, setValue];\r\n  }","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BasicRadio from '../../components/radio/radio';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TeamsInLeague from '../../components/teamsInLeague';\r\nimport './TeamSelect.scss';\r\nimport CompetitionContext from '../../context/competitionContext';\r\n\r\nconst TeamSelect = ({competitions, onTeamSelect}) => {\r\n    const [gender, setGender] = useState('men');\r\n    const [selectedCompId, setSelectedCompetition ] = useState(null);\r\n\r\n    return competitions.length && (\r\n        <section className=\"leagues\">\r\n            {/* <BasicRadio value={gender} setValue={setGender} /> */}\r\n            <div className={\"pad-all-sm marg-bottom-sm flex\"} style={{color: \"#fff\", fontSize: \"1.2rem\"}}>\r\n                <span className={\"text-center\"} style={{width: \"90%\"}}>Take control! Select a team to analyse for financial viability.</span>\r\n                <span className={\"align-right\"}>Budget: 7m</span>\r\n            </div>\r\n\r\n            {gender === 'men' &&\r\n                competitions.filter(c => !c.name.includes('WSL') && \r\n                    (selectedCompId === null || selectedCompId === c.leagueId)).sort((a, b) => a.tier > b.tier ? 1 : -1).map((comp) => {\r\n                return <Accordion key={comp.leagueId} onChange={(ev, expanded) => {\r\n                    setSelectedCompetition(expanded ? comp.leagueId : null)\r\n                }} className=\"team-select-acc\" TransitionProps={{ unmountOnExit: true }}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\">\r\n                        {comp.name}\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <CompetitionContext.Provider value={comp}>\r\n                            <TeamsInLeague onTeamSelect={onTeamSelect} />\r\n                        </CompetitionContext.Provider>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            })}\r\n        </section>\r\n    );\r\n}\r\n\r\nconst wslTeamSelect = ({ competitions, onTeamSelect }) => {\r\n    return competitions.filter(c => c.name.includes('WSL')).sort((a, b) => a.tier > b.tier ? 1 : -1).map((comp) => {\r\n        return <div key={comp.leagueId} className=\"league\">\r\n                <div className=\"league-name\">\r\n                    {comp.name}\r\n                </div>\r\n                <div className=\"league-logo\">\r\n                    <CompetitionContext.Provider value={comp}>\r\n                        <TeamsInLeague onTeamSelect={onTeamSelect} />\r\n                    </CompetitionContext.Provider>\r\n                </div>\r\n            </div>\r\n    })\r\n}\r\n\r\nTeamSelect.propTypes = {\r\n    competitions: PropTypes.array,\r\n    onTeamSelect: PropTypes.func\r\n}\r\n \r\nexport default TeamSelect;","import TeamSelectContainer from \"./TeamSelectContainer\";\r\n\r\nexport default TeamSelectContainer;","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport TeamSelect from './TeamSelect';\r\nimport { Loading } from '../../components/loading';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport { getCompetitionsForCountry } from '../../services/competition';\r\n\r\nconst TeamSelectContainer = () => {\r\n    const competitionsQuery = getCompetitionsForCountry('England');\r\n    const [ \r\n        competitionsForCountry, \r\n        competitionsLoading, \r\n        competitionLoadError\r\n    ] = useFetch(competitionsQuery, \"competitions\");\r\n    let history = useHistory();\r\n\r\n    function teamSelected(teamId) {\r\n        history.push('/clubhouse/' + teamId);\r\n    }\r\n\r\n    const loadingOrError = competitionsLoading ? \r\n        competitionLoadError ? \r\n            <div>Eek, something went wrong</div> : \r\n            <Loading>{competitionLoadError}</Loading> \r\n        : null;\r\n     \r\n    return competitionsForCountry && !competitionsLoading && !competitionLoadError ? \r\n        <TeamSelect competitions={competitionsForCountry} onTeamSelect={teamSelected} /> : loadingOrError;\r\n}\r\n\r\nexport default TeamSelectContainer;","import React, { useEffect, useState } from 'react';\nimport Start from './pages/Start';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './styles/mat-theme';\nimport svgPattern from './bgPattern.svg';\nimport { \n  BrowserRouter as Router, Route, Switch\n} from 'react-router-dom';\nimport './App.scss';\nimport UserContext from './context/userContext';\nimport { Clubhouse } from './pages/clubhouse';\nimport userService from './services/user/userServices';\nimport TeamSelect from './pages/teamselect';\n\nfunction App() {\n  const [ user, setUser ] = useState(null);\n\n  useEffect(() => {\n    (async() => {\n      const userInfo = await userService.getUserInfo();\n\n      if (!userInfo) return;\n      const usersList = await userService.getUsersFromId(parseInt(userInfo.userId));\n\n      if (usersList.length === 0) {\n          const userResult = await userService.createUser(userInfo);\n          userResult.error.message ? \n              console.error('unable to create user: ', userResult.error.message) :\n              setUser(userResult.record);\n      } else {\n          setUser(usersList[0]);\n      }\n    })();\n  }, []);\n  \n  const base = process.env.NODE_ENV === \"production\" ? \"/ffo\" : \"/\";\n  \n  return user &&\n    <UserContext.Provider value={user}>\n      <div className=\"app\">\n        <div className=\"background\">\n          <img alt=\"background pattern\" src={svgPattern}></img>\n        </div>\n          <ThemeProvider theme={theme}>\n            <Router basename={base}>\n              <Switch>\n                <Route exact path='/'>\n                  <Start />\n                </Route>\n                <Route exact path='/new'>\n                  <TeamSelect />\n                </Route>\n                <Route exact path='/clubhouse/:teamId'>\n                  <Clubhouse />\n                </Route>\n                <Route path='*'>\n                  <Start />\n                </Route>\n              </Switch>\n            </Router>\n          </ThemeProvider>\n      </div>\n    </UserContext.Provider>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}